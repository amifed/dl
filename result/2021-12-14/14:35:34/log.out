dataset_path: /home/djy/dataset/dataset
pretrained : False 
parallel: False

msg: eca+x se+identity resnet18
using model: ResNet, resnet18
using device cuda:0
batch_size = 20
epochs = 64
loss_function = CrossEntropyLoss()
optimizer = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    initial_lr: 0.01
    lr: 0.01
    weight_decay: 0
)


========== Train Epoch 1 ==========
Loss: 2.005	Accuracy: 28.72%	Cost 30s

========== Train Epoch 2 ==========
Loss: 1.864	Accuracy: 31.38%	Cost 29s

========== Train Epoch 3 ==========
Loss: 1.854	Accuracy: 31.91%	Cost 30s

========== Train Epoch 4 ==========
Loss: 1.867	Accuracy: 31.91%	Cost 30s

========== Train Epoch 5 ==========
Loss: 1.865	Accuracy: 31.91%	Cost 28s

========== Train Epoch 6 ==========
Loss: 1.859	Accuracy: 31.91%	Cost 31s

========== Train Epoch 7 ==========
Loss: 1.854	Accuracy: 31.91%	Cost 29s

========== Train Epoch 8 ==========
Loss: 1.864	Accuracy: 31.91%	Cost 31s

========== Train Epoch 9 ==========
Loss: 1.861	Accuracy: 31.91%	Cost 31s

========== Train Epoch 10 ==========
Loss: 1.860	Accuracy: 31.91%	Cost 31s

========== Train Epoch 11 ==========
Loss: 1.855	Accuracy: 31.91%	Cost 30s

========== Train Epoch 12 ==========
Loss: 1.863	Accuracy: 31.91%	Cost 31s

========== Train Epoch 13 ==========
Loss: 1.859	Accuracy: 31.91%	Cost 29s

========== Train Epoch 14 ==========
Loss: 1.851	Accuracy: 31.91%	Cost 30s

========== Train Epoch 15 ==========
Loss: 1.855	Accuracy: 31.91%	Cost 30s

========== Train Epoch 16 ==========
Loss: 1.864	Accuracy: 32.45%	Cost 31s

========== Train Epoch 17 ==========
Loss: 1.867	Accuracy: 31.91%	Cost 30s

========== Train Epoch 18 ==========
Loss: 1.858	Accuracy: 31.91%	Cost 30s

========== Train Epoch 19 ==========
Loss: 1.856	Accuracy: 31.91%	Cost 31s

========== Train Epoch 20 ==========
Loss: 1.869	Accuracy: 31.91%	Cost 28s

========== Train Epoch 21 ==========
Loss: 1.853	Accuracy: 31.91%	Cost 30s

========== Train Epoch 22 ==========
Loss: 1.866	Accuracy: 31.91%	Cost 31s

========== Train Epoch 23 ==========
Loss: 1.860	Accuracy: 31.91%	Cost 29s

========== Train Epoch 24 ==========
Loss: 1.852	Accuracy: 31.91%	Cost 30s

========== Train Epoch 25 ==========
Loss: 1.849	Accuracy: 31.91%	Cost 31s

========== Train Epoch 26 ==========
Loss: 1.858	Accuracy: 31.91%	Cost 31s

========== Train Epoch 27 ==========
Loss: 1.856	Accuracy: 32.45%	Cost 29s

========== Train Epoch 28 ==========
Loss: 1.859	Accuracy: 31.91%	Cost 29s

========== Train Epoch 29 ==========
Loss: 1.852	Accuracy: 31.91%	Cost 29s

========== Train Epoch 30 ==========
Loss: 1.851	Accuracy: 32.45%	Cost 31s

========== Train Epoch 31 ==========
Loss: 1.854	Accuracy: 31.91%	Cost 32s

========== Train Epoch 32 ==========
Loss: 1.852	Accuracy: 31.91%	Cost 31s

========== Train Epoch 33 ==========
Loss: 1.859	Accuracy: 31.38%	Cost 31s

========== Train Epoch 34 ==========
Loss: 1.863	Accuracy: 32.45%	Cost 29s

========== Train Epoch 35 ==========
Loss: 1.861	Accuracy: 32.45%	Cost 31s

========== Train Epoch 36 ==========
Loss: 1.863	Accuracy: 31.91%	Cost 30s

========== Train Epoch 37 ==========
Loss: 1.854	Accuracy: 31.91%	Cost 31s

========== Train Epoch 38 ==========
Loss: 1.861	Accuracy: 31.91%	Cost 31s

========== Train Epoch 39 ==========
Loss: 1.860	Accuracy: 32.45%	Cost 29s

========== Train Epoch 40 ==========
Loss: 1.871	Accuracy: 31.91%	Cost 29s

========== Train Epoch 41 ==========
Loss: 1.869	Accuracy: 30.85%	Cost 30s

========== Train Epoch 42 ==========
Loss: 1.852	Accuracy: 31.38%	Cost 30s

========== Train Epoch 43 ==========
Loss: 1.860	Accuracy: 31.38%	Cost 31s

========== Train Epoch 44 ==========
Loss: 1.857	Accuracy: 32.45%	Cost 32s

========== Train Epoch 45 ==========
Loss: 1.860	Accuracy: 32.45%	Cost 29s

========== Train Epoch 46 ==========
Loss: 1.857	Accuracy: 32.45%	Cost 30s

========== Train Epoch 47 ==========
Loss: 1.862	Accuracy: 32.45%	Cost 29s

========== Train Epoch 48 ==========
Loss: 1.859	Accuracy: 31.91%	Cost 30s

========== Train Epoch 49 ==========
Loss: 1.846	Accuracy: 31.91%	Cost 30s

========== Train Epoch 50 ==========
Loss: 1.852	Accuracy: 31.91%	Cost 29s

========== Train Epoch 51 ==========
Loss: 1.854	Accuracy: 31.91%	Cost 31s

========== Train Epoch 52 ==========
Loss: 1.866	Accuracy: 32.45%	Cost 32s

========== Train Epoch 53 ==========
Loss: 1.859	Accuracy: 31.91%	Cost 30s

========== Train Epoch 54 ==========
Loss: 1.868	Accuracy: 31.38%	Cost 32s

========== Train Epoch 55 ==========
Loss: 1.851	Accuracy: 32.45%	Cost 30s

========== Train Epoch 56 ==========
Loss: 1.860	Accuracy: 32.45%	Cost 30s

========== Train Epoch 57 ==========
Loss: 1.859	Accuracy: 31.91%	Cost 29s

========== Train Epoch 58 ==========
Loss: 1.861	Accuracy: 31.91%	Cost 29s

========== Train Epoch 59 ==========
Loss: 1.864	Accuracy: 31.91%	Cost 28s

========== Train Epoch 60 ==========
Loss: 1.858	Accuracy: 31.38%	Cost 29s

========== Train Epoch 61 ==========
Loss: 1.867	Accuracy: 31.91%	Cost 29s

========== Train Epoch 62 ==========
Loss: 1.863	Accuracy: 32.45%	Cost 30s

========== Train Epoch 63 ==========
Loss: 1.866	Accuracy: 31.91%	Cost 29s

========== Train Epoch 64 ==========
Loss: 1.859	Accuracy: 32.45%	Cost 31s

Finished training!!!

Min Loss = 1.846 in epoch 48;
    Max Accuracy = 32.45% in epoch 15;
    Total Cost 32 minutes

ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (se): SELayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (fc): Sequential(
          (0): Linear(in_features=64, out_features=4, bias=False)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=4, out_features=64, bias=False)
          (3): Sigmoid()
        )
      )
      (eca): ECALayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (sigmoid): Sigmoid()
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (se): SELayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (fc): Sequential(
          (0): Linear(in_features=64, out_features=4, bias=False)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=4, out_features=64, bias=False)
          (3): Sigmoid()
        )
      )
      (eca): ECALayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (sigmoid): Sigmoid()
      )
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (se): SELayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (fc): Sequential(
          (0): Linear(in_features=128, out_features=8, bias=False)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=8, out_features=128, bias=False)
          (3): Sigmoid()
        )
      )
      (eca): ECALayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (sigmoid): Sigmoid()
      )
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (se): SELayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (fc): Sequential(
          (0): Linear(in_features=128, out_features=8, bias=False)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=8, out_features=128, bias=False)
          (3): Sigmoid()
        )
      )
      (eca): ECALayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (sigmoid): Sigmoid()
      )
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (se): SELayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (fc): Sequential(
          (0): Linear(in_features=256, out_features=16, bias=False)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=16, out_features=256, bias=False)
          (3): Sigmoid()
        )
      )
      (eca): ECALayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (sigmoid): Sigmoid()
      )
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (se): SELayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (fc): Sequential(
          (0): Linear(in_features=256, out_features=16, bias=False)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=16, out_features=256, bias=False)
          (3): Sigmoid()
        )
      )
      (eca): ECALayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (sigmoid): Sigmoid()
      )
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (se): SELayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (fc): Sequential(
          (0): Linear(in_features=512, out_features=32, bias=False)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=32, out_features=512, bias=False)
          (3): Sigmoid()
        )
      )
      (eca): ECALayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (sigmoid): Sigmoid()
      )
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (se): SELayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (fc): Sequential(
          (0): Linear(in_features=512, out_features=32, bias=False)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=32, out_features=512, bias=False)
          (3): Sigmoid()
        )
      )
      (eca): ECALayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (sigmoid): Sigmoid()
      )
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (fc_): Linear(in_features=512, out_features=7, bias=True)
  (__fc__): Linear(in_features=1024, out_features=7, bias=True)
)

[0.2872340425531915, 0.31382978723404253, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.324468085106383, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.324468085106383, 0.3191489361702128, 0.3191489361702128, 0.324468085106383, 0.3191489361702128, 0.3191489361702128, 0.31382978723404253, 0.324468085106383, 0.324468085106383, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.324468085106383, 0.3191489361702128, 0.30851063829787234, 0.31382978723404253, 0.31382978723404253, 0.324468085106383, 0.324468085106383, 0.324468085106383, 0.324468085106383, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.324468085106383, 0.3191489361702128, 0.31382978723404253, 0.324468085106383, 0.324468085106383, 0.3191489361702128, 0.3191489361702128, 0.3191489361702128, 0.31382978723404253, 0.3191489361702128, 0.324468085106383, 0.3191489361702128, 0.324468085106383]
