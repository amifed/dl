dataset_path: /home/djy/dataset/dataset
pretrained : True 
parallel: True

parallel segmentent dataset : /home/djy/dataset/ycrcb_hsv_dataset
msg: SPP_CBAM_ResNet18_AlexNet no_grad
using model: ResNet, resnet18
using device cuda:0
batch_size = 20
epochs = 64
loss_function = CrossEntropyLoss()
optimizer = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0
)


========== Train Epoch 1 ==========
Loss: 1.869	Accuracy: 32.45%	Cost 29s

========== Train Epoch 2 ==========
Loss: 1.841	Accuracy: 32.45%	Cost 27s

========== Train Epoch 3 ==========
Loss: 1.833	Accuracy: 32.45%	Cost 29s

========== Train Epoch 4 ==========
Loss: 1.809	Accuracy: 32.45%	Cost 32s

========== Train Epoch 5 ==========
Loss: 1.784	Accuracy: 32.45%	Cost 29s

========== Train Epoch 6 ==========
Loss: 1.767	Accuracy: 31.91%	Cost 30s

========== Train Epoch 7 ==========
Loss: 1.734	Accuracy: 32.98%	Cost 31s

========== Train Epoch 8 ==========
Loss: 1.695	Accuracy: 30.32%	Cost 31s

========== Train Epoch 9 ==========
Loss: 1.699	Accuracy: 37.23%	Cost 32s

========== Train Epoch 10 ==========
Loss: 1.647	Accuracy: 37.23%	Cost 31s

========== Train Epoch 11 ==========
Loss: 1.592	Accuracy: 39.36%	Cost 30s

========== Train Epoch 12 ==========
Loss: 1.578	Accuracy: 40.43%	Cost 32s

========== Train Epoch 13 ==========
Loss: 1.512	Accuracy: 43.09%	Cost 29s

========== Train Epoch 14 ==========
Loss: 1.459	Accuracy: 45.21%	Cost 30s

========== Train Epoch 15 ==========
Loss: 1.408	Accuracy: 46.28%	Cost 30s

========== Train Epoch 16 ==========
Loss: 1.334	Accuracy: 47.87%	Cost 29s

========== Train Epoch 17 ==========
Loss: 1.311	Accuracy: 46.28%	Cost 31s

========== Train Epoch 18 ==========
Loss: 1.280	Accuracy: 50.53%	Cost 31s

========== Train Epoch 19 ==========
Loss: 1.268	Accuracy: 50.00%	Cost 31s

========== Train Epoch 20 ==========
Loss: 1.192	Accuracy: 48.94%	Cost 31s

========== Train Epoch 21 ==========
Loss: 1.091	Accuracy: 48.94%	Cost 31s

========== Train Epoch 22 ==========
Loss: 1.085	Accuracy: 51.06%	Cost 31s

========== Train Epoch 23 ==========
Loss: 1.018	Accuracy: 54.26%	Cost 29s

========== Train Epoch 24 ==========
Loss: 0.951	Accuracy: 50.00%	Cost 31s

========== Train Epoch 25 ==========
Loss: 0.923	Accuracy: 54.79%	Cost 30s

========== Train Epoch 26 ==========
Loss: 0.871	Accuracy: 54.26%	Cost 32s

========== Train Epoch 27 ==========
Loss: 0.805	Accuracy: 53.19%	Cost 30s

========== Train Epoch 28 ==========
Loss: 0.852	Accuracy: 50.53%	Cost 31s

========== Train Epoch 29 ==========
Loss: 0.777	Accuracy: 57.45%	Cost 30s

========== Train Epoch 30 ==========
Loss: 0.656	Accuracy: 57.45%	Cost 31s

========== Train Epoch 31 ==========
Loss: 0.604	Accuracy: 57.98%	Cost 31s

========== Train Epoch 32 ==========
Loss: 0.625	Accuracy: 56.38%	Cost 31s

========== Train Epoch 33 ==========
Loss: 0.593	Accuracy: 54.79%	Cost 32s

========== Train Epoch 34 ==========
Loss: 0.536	Accuracy: 58.51%	Cost 29s

========== Train Epoch 35 ==========
Loss: 0.510	Accuracy: 58.51%	Cost 31s

========== Train Epoch 36 ==========
Loss: 0.454	Accuracy: 57.45%	Cost 30s

========== Train Epoch 37 ==========
Loss: 0.388	Accuracy: 60.64%	Cost 29s

========== Train Epoch 38 ==========
Loss: 0.339	Accuracy: 61.17%	Cost 30s

========== Train Epoch 39 ==========
Loss: 0.325	Accuracy: 61.17%	Cost 30s

========== Train Epoch 40 ==========
Loss: 0.280	Accuracy: 57.45%	Cost 31s

========== Train Epoch 41 ==========
Loss: 0.328	Accuracy: 57.98%	Cost 30s

========== Train Epoch 42 ==========
Loss: 0.249	Accuracy: 60.11%	Cost 32s

========== Train Epoch 43 ==========
Loss: 0.260	Accuracy: 60.64%	Cost 30s

========== Train Epoch 44 ==========
Loss: 0.260	Accuracy: 60.11%	Cost 30s

========== Train Epoch 45 ==========
Loss: 0.176	Accuracy: 60.64%	Cost 31s

========== Train Epoch 46 ==========
Loss: 0.148	Accuracy: 60.64%	Cost 30s

========== Train Epoch 47 ==========
Loss: 0.240	Accuracy: 61.17%	Cost 29s

========== Train Epoch 48 ==========
Loss: 0.132	Accuracy: 58.51%	Cost 30s

========== Train Epoch 49 ==========
Loss: 0.092	Accuracy: 60.11%	Cost 28s

========== Train Epoch 50 ==========
Loss: 0.089	Accuracy: 59.04%	Cost 30s

========== Train Epoch 51 ==========
Loss: 0.074	Accuracy: 62.77%	Cost 30s

========== Train Epoch 52 ==========
Loss: 0.080	Accuracy: 59.57%	Cost 30s

========== Train Epoch 53 ==========
Loss: 0.063	Accuracy: 60.11%	Cost 32s

========== Train Epoch 54 ==========
Loss: 0.051	Accuracy: 63.83%	Cost 30s

========== Train Epoch 55 ==========
Loss: 0.045	Accuracy: 62.23%	Cost 30s

========== Train Epoch 56 ==========
Loss: 0.037	Accuracy: 61.17%	Cost 30s

========== Train Epoch 57 ==========
Loss: 0.045	Accuracy: 64.36%	Cost 31s

========== Train Epoch 58 ==========
Loss: 0.037	Accuracy: 64.89%	Cost 32s

========== Train Epoch 59 ==========
Loss: 0.032	Accuracy: 60.64%	Cost 30s

========== Train Epoch 60 ==========
Loss: 0.030	Accuracy: 59.57%	Cost 31s

========== Train Epoch 61 ==========
Loss: 0.023	Accuracy: 62.23%	Cost 30s

========== Train Epoch 62 ==========
Loss: 0.021	Accuracy: 64.89%	Cost 30s

========== Train Epoch 63 ==========
Loss: 0.021	Accuracy: 62.23%	Cost 30s

========== Train Epoch 64 ==========
Loss: 0.021	Accuracy: 64.36%	Cost 31s

Finished training!!!

Min Loss = 0.021 in epoch 61;
    Max Accuracy = 64.89% in epoch 57;
    Total Cost 32 minutes

ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (cbam): CBAM(
        (ChannelGate): ChannelGate(
          (mlp): Sequential(
            (0): Flatten()
            (1): Linear(in_features=64, out_features=4, bias=True)
            (2): ReLU()
            (3): Linear(in_features=4, out_features=64, bias=True)
          )
        )
        (SpatialGate): SpatialGate(
          (compress): ChannelPool()
          (spatial): BasicConv(
            (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
            (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (cbam): CBAM(
        (ChannelGate): ChannelGate(
          (mlp): Sequential(
            (0): Flatten()
            (1): Linear(in_features=64, out_features=4, bias=True)
            (2): ReLU()
            (3): Linear(in_features=4, out_features=64, bias=True)
          )
        )
        (SpatialGate): SpatialGate(
          (compress): ChannelPool()
          (spatial): BasicConv(
            (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
            (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          )
        )
      )
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (cbam): CBAM(
        (ChannelGate): ChannelGate(
          (mlp): Sequential(
            (0): Flatten()
            (1): Linear(in_features=128, out_features=8, bias=True)
            (2): ReLU()
            (3): Linear(in_features=8, out_features=128, bias=True)
          )
        )
        (SpatialGate): SpatialGate(
          (compress): ChannelPool()
          (spatial): BasicConv(
            (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
            (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (cbam): CBAM(
        (ChannelGate): ChannelGate(
          (mlp): Sequential(
            (0): Flatten()
            (1): Linear(in_features=128, out_features=8, bias=True)
            (2): ReLU()
            (3): Linear(in_features=8, out_features=128, bias=True)
          )
        )
        (SpatialGate): SpatialGate(
          (compress): ChannelPool()
          (spatial): BasicConv(
            (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
            (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          )
        )
      )
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (cbam): CBAM(
        (ChannelGate): ChannelGate(
          (mlp): Sequential(
            (0): Flatten()
            (1): Linear(in_features=256, out_features=16, bias=True)
            (2): ReLU()
            (3): Linear(in_features=16, out_features=256, bias=True)
          )
        )
        (SpatialGate): SpatialGate(
          (compress): ChannelPool()
          (spatial): BasicConv(
            (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
            (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (cbam): CBAM(
        (ChannelGate): ChannelGate(
          (mlp): Sequential(
            (0): Flatten()
            (1): Linear(in_features=256, out_features=16, bias=True)
            (2): ReLU()
            (3): Linear(in_features=16, out_features=256, bias=True)
          )
        )
        (SpatialGate): SpatialGate(
          (compress): ChannelPool()
          (spatial): BasicConv(
            (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
            (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          )
        )
      )
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (cbam): CBAM(
        (ChannelGate): ChannelGate(
          (mlp): Sequential(
            (0): Flatten()
            (1): Linear(in_features=512, out_features=32, bias=True)
            (2): ReLU()
            (3): Linear(in_features=32, out_features=512, bias=True)
          )
        )
        (SpatialGate): SpatialGate(
          (compress): ChannelPool()
          (spatial): BasicConv(
            (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
            (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (cbam): CBAM(
        (ChannelGate): ChannelGate(
          (mlp): Sequential(
            (0): Flatten()
            (1): Linear(in_features=512, out_features=32, bias=True)
            (2): ReLU()
            (3): Linear(in_features=32, out_features=512, bias=True)
          )
        )
        (SpatialGate): SpatialGate(
          (compress): ChannelPool()
          (spatial): BasicConv(
            (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
            (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          )
        )
      )
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (spppool): SPP(
    (pool1): MaxPool2d(kernel_size=5, stride=1, padding=2, dilation=1, ceil_mode=False)
    (pool2): MaxPool2d(kernel_size=7, stride=1, padding=3, dilation=1, ceil_mode=False)
    (pool3): MaxPool2d(kernel_size=13, stride=1, padding=6, dilation=1, ceil_mode=False)
  )
  (convspp): Conv2d(256, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bnspp): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (reluspp): ReLU(inplace=True)
  (fc_): Linear(in_features=512, out_features=7, bias=True)
  (__fc__): Linear(in_features=1024, out_features=7, bias=True)
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(11, 11), stride=(4, 4), padding=(2, 2))
    (1): ReLU(inplace=True)
    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(64, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
    (4): ReLU(inplace=True)
    (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU(inplace=True)
    (8): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): ReLU(inplace=True)
    (10): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool_): AdaptiveAvgPool2d(output_size=(1, 1))
)

[0.324468085106383, 0.324468085106383, 0.324468085106383, 0.324468085106383, 0.324468085106383, 0.3191489361702128, 0.32978723404255317, 0.30319148936170215, 0.3723404255319149, 0.3723404255319149, 0.39361702127659576, 0.40425531914893614, 0.4308510638297872, 0.4521276595744681, 0.4627659574468085, 0.4787234042553192, 0.4627659574468085, 0.5053191489361702, 0.5, 0.48936170212765956, 0.48936170212765956, 0.5106382978723404, 0.5425531914893617, 0.5, 0.5478723404255319, 0.5425531914893617, 0.5319148936170213, 0.5053191489361702, 0.574468085106383, 0.574468085106383, 0.5797872340425532, 0.5638297872340425, 0.5478723404255319, 0.5851063829787234, 0.5851063829787234, 0.574468085106383, 0.6063829787234043, 0.6117021276595744, 0.6117021276595744, 0.574468085106383, 0.5797872340425532, 0.601063829787234, 0.6063829787234043, 0.601063829787234, 0.6063829787234043, 0.6063829787234043, 0.6117021276595744, 0.5851063829787234, 0.601063829787234, 0.5904255319148937, 0.6276595744680851, 0.5957446808510638, 0.601063829787234, 0.6382978723404256, 0.6223404255319149, 0.6117021276595744, 0.6436170212765957, 0.648936170212766, 0.6063829787234043, 0.5957446808510638, 0.6223404255319149, 0.648936170212766, 0.6223404255319149, 0.6436170212765957]
