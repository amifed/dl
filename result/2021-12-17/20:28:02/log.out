dataset_path: /home/djy/dataset/dataset
pretrained : False 
parallel: True

parallel segmentent dataset : /home/djy/dataset/ycrcb_hsv_dataset
msg: alexnet
using model: AlexNet, _alexnet
using device cuda:0
batch_size = 20
epochs = 64
loss_function = CrossEntropyLoss()
optimizer = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0
)


========== Train Epoch 1 ==========
Loss: 1.876	Accuracy: 32.45%	Cost 30s

========== Train Epoch 2 ==========
Loss: 1.863	Accuracy: 32.45%	Cost 29s

========== Train Epoch 3 ==========
Loss: 1.823	Accuracy: 31.38%	Cost 29s

========== Train Epoch 4 ==========
Loss: 1.776	Accuracy: 36.70%	Cost 30s

========== Train Epoch 5 ==========
Loss: 1.703	Accuracy: 34.04%	Cost 30s

========== Train Epoch 6 ==========
Loss: 1.651	Accuracy: 33.51%	Cost 31s

========== Train Epoch 7 ==========
Loss: 1.578	Accuracy: 39.36%	Cost 30s

========== Train Epoch 8 ==========
Loss: 1.469	Accuracy: 46.28%	Cost 31s

========== Train Epoch 9 ==========
Loss: 1.363	Accuracy: 41.49%	Cost 31s

========== Train Epoch 10 ==========
Loss: 1.275	Accuracy: 50.00%	Cost 31s

========== Train Epoch 11 ==========
Loss: 1.166	Accuracy: 50.00%	Cost 31s

========== Train Epoch 12 ==========
Loss: 1.118	Accuracy: 50.00%	Cost 29s

========== Train Epoch 13 ==========
Loss: 1.000	Accuracy: 53.19%	Cost 31s

========== Train Epoch 14 ==========
Loss: 0.867	Accuracy: 50.53%	Cost 30s

========== Train Epoch 15 ==========
Loss: 0.901	Accuracy: 51.06%	Cost 30s

========== Train Epoch 16 ==========
Loss: 0.766	Accuracy: 52.13%	Cost 29s

========== Train Epoch 17 ==========
Loss: 0.685	Accuracy: 52.13%	Cost 29s

========== Train Epoch 18 ==========
Loss: 0.591	Accuracy: 53.72%	Cost 29s

========== Train Epoch 19 ==========
Loss: 0.511	Accuracy: 54.79%	Cost 30s

========== Train Epoch 20 ==========
Loss: 0.487	Accuracy: 53.19%	Cost 29s

========== Train Epoch 21 ==========
Loss: 0.398	Accuracy: 56.38%	Cost 30s

========== Train Epoch 22 ==========
Loss: 0.526	Accuracy: 57.45%	Cost 31s

========== Train Epoch 23 ==========
Loss: 0.362	Accuracy: 53.19%	Cost 29s

========== Train Epoch 24 ==========
Loss: 0.259	Accuracy: 56.91%	Cost 31s

========== Train Epoch 25 ==========
Loss: 0.273	Accuracy: 52.13%	Cost 30s

========== Train Epoch 26 ==========
Loss: 0.290	Accuracy: 58.51%	Cost 32s

========== Train Epoch 27 ==========
Loss: 0.203	Accuracy: 56.91%	Cost 30s

========== Train Epoch 28 ==========
Loss: 0.213	Accuracy: 60.11%	Cost 32s

========== Train Epoch 29 ==========
Loss: 0.173	Accuracy: 59.57%	Cost 31s

========== Train Epoch 30 ==========
Loss: 0.142	Accuracy: 61.17%	Cost 30s

========== Train Epoch 31 ==========
Loss: 0.168	Accuracy: 55.85%	Cost 30s

========== Train Epoch 32 ==========
Loss: 0.152	Accuracy: 57.98%	Cost 29s

========== Train Epoch 33 ==========
Loss: 0.101	Accuracy: 62.77%	Cost 31s

========== Train Epoch 34 ==========
Loss: 0.161	Accuracy: 58.51%	Cost 32s

========== Train Epoch 35 ==========
Loss: 0.112	Accuracy: 59.57%	Cost 31s

========== Train Epoch 36 ==========
Loss: 0.090	Accuracy: 61.17%	Cost 30s

========== Train Epoch 37 ==========
Loss: 0.080	Accuracy: 59.04%	Cost 29s

========== Train Epoch 38 ==========
Loss: 0.078	Accuracy: 62.77%	Cost 31s

========== Train Epoch 39 ==========
Loss: 0.085	Accuracy: 59.04%	Cost 31s

========== Train Epoch 40 ==========
Loss: 0.076	Accuracy: 60.11%	Cost 30s

========== Train Epoch 41 ==========
Loss: 0.098	Accuracy: 60.64%	Cost 30s

========== Train Epoch 42 ==========
Loss: 0.090	Accuracy: 62.77%	Cost 29s

========== Train Epoch 43 ==========
Loss: 0.055	Accuracy: 60.11%	Cost 29s

========== Train Epoch 44 ==========
Loss: 0.064	Accuracy: 60.64%	Cost 31s

========== Train Epoch 45 ==========
Loss: 0.048	Accuracy: 63.30%	Cost 29s

========== Train Epoch 46 ==========
Loss: 0.063	Accuracy: 58.51%	Cost 29s

========== Train Epoch 47 ==========
Loss: 0.076	Accuracy: 61.70%	Cost 30s

========== Train Epoch 48 ==========
Loss: 0.068	Accuracy: 59.04%	Cost 30s

========== Train Epoch 49 ==========
Loss: 0.136	Accuracy: 61.70%	Cost 29s

========== Train Epoch 50 ==========
Loss: 0.075	Accuracy: 60.64%	Cost 30s

========== Train Epoch 51 ==========
Loss: 0.087	Accuracy: 59.04%	Cost 29s

========== Train Epoch 52 ==========
Loss: 0.075	Accuracy: 61.70%	Cost 30s

========== Train Epoch 53 ==========
Loss: 0.040	Accuracy: 63.30%	Cost 30s

========== Train Epoch 54 ==========
Loss: 0.041	Accuracy: 60.11%	Cost 31s

========== Train Epoch 55 ==========
Loss: 0.060	Accuracy: 62.23%	Cost 30s

========== Train Epoch 56 ==========
Loss: 0.054	Accuracy: 63.30%	Cost 32s

========== Train Epoch 57 ==========
Loss: 0.041	Accuracy: 62.77%	Cost 30s

========== Train Epoch 58 ==========
Loss: 0.034	Accuracy: 61.70%	Cost 30s

========== Train Epoch 59 ==========
Loss: 0.053	Accuracy: 64.36%	Cost 30s

========== Train Epoch 60 ==========
Loss: 0.085	Accuracy: 65.96%	Cost 31s

========== Train Epoch 61 ==========
Loss: 0.032	Accuracy: 64.89%	Cost 29s

========== Train Epoch 62 ==========
Loss: 0.019	Accuracy: 61.17%	Cost 29s

========== Train Epoch 63 ==========
Loss: 0.041	Accuracy: 61.70%	Cost 32s

========== Train Epoch 64 ==========
Loss: 0.064	Accuracy: 61.17%	Cost 30s

Finished training!!!

Min Loss = 0.019 in epoch 61;
    Max Accuracy = 65.96% in epoch 59;
    Total Cost 32 minutes

AlexNet(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(11, 11), stride=(4, 4), padding=(2, 2))
    (1): ReLU(inplace=True)
    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(64, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
    (4): ReLU(inplace=True)
    (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU(inplace=True)
    (8): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): ReLU(inplace=True)
    (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(4, 4), padding=(2, 2))
  (relu1): ReLU(inplace=True)
  (pool1): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  (relu2): ReLU(inplace=True)
  (pool2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv3): Conv2d(256, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (relu3): ReLU(inplace=True)
  (conv4): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (relu4): ReLU(inplace=True)
  (conv5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (relu5): ReLU(inplace=True)
  (avgpool): AdaptiveAvgPool2d(output_size=(3, 3))
  (classifier_): Sequential(
    (0): Dropout(p=0.5, inplace=False)
    (1): Linear(in_features=2304, out_features=4096, bias=True)
    (2): ReLU(inplace=True)
    (3): Dropout(p=0.5, inplace=False)
    (4): Linear(in_features=4096, out_features=4096, bias=True)
    (5): ReLU(inplace=True)
    (6): Linear(in_features=4096, out_features=7, bias=True)
  )
  (__classifier__): Sequential(
    (0): Dropout(p=0.5, inplace=False)
    (1): Linear(in_features=4608, out_features=4096, bias=True)
    (2): ReLU(inplace=True)
    (3): Dropout(p=0.5, inplace=False)
    (4): Linear(in_features=4096, out_features=4096, bias=True)
    (5): ReLU(inplace=True)
    (6): Linear(in_features=4096, out_features=7, bias=True)
  )
  (spp1): SPP()
)

[0.324468085106383, 0.324468085106383, 0.31382978723404253, 0.3670212765957447, 0.3404255319148936, 0.3351063829787234, 0.39361702127659576, 0.4627659574468085, 0.4148936170212766, 0.5, 0.5, 0.5, 0.5319148936170213, 0.5053191489361702, 0.5106382978723404, 0.5212765957446809, 0.5212765957446809, 0.5372340425531915, 0.5478723404255319, 0.5319148936170213, 0.5638297872340425, 0.574468085106383, 0.5319148936170213, 0.5691489361702128, 0.5212765957446809, 0.5851063829787234, 0.5691489361702128, 0.601063829787234, 0.5957446808510638, 0.6117021276595744, 0.5585106382978723, 0.5797872340425532, 0.6276595744680851, 0.5851063829787234, 0.5957446808510638, 0.6117021276595744, 0.5904255319148937, 0.6276595744680851, 0.5904255319148937, 0.601063829787234, 0.6063829787234043, 0.6276595744680851, 0.601063829787234, 0.6063829787234043, 0.6329787234042553, 0.5851063829787234, 0.6170212765957447, 0.5904255319148937, 0.6170212765957447, 0.6063829787234043, 0.5904255319148937, 0.6170212765957447, 0.6329787234042553, 0.601063829787234, 0.6223404255319149, 0.6329787234042553, 0.6276595744680851, 0.6170212765957447, 0.6436170212765957, 0.6595744680851063, 0.648936170212766, 0.6117021276595744, 0.6170212765957447, 0.6117021276595744]
Traceback (most recent call last):
  File "train.py", line 247, in <module>
    Plot('', 'b', acc_list)
TypeError: plot() got an unexpected keyword argument 'args'
